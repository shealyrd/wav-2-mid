function [weights, errors, epoch_count] = neural_network()

plot_data = true;
max_weight = 1/2;
max_iterations = 2000;
eta = .1;
validation_stop_threshold = .1;
input_dimension = 4000;
output_dimension = 60416;
bias = 1;

weights = initialize_weights(max_weight, input_dimension + 1, output_dimension);

epoch_count = 1;

while true
    
    [inputTrain, outputTrain] = loadData(1);
    [inputVal, outputVal] = loadData(2);
    [inputTest, outputTest] = loadData(3);
    
    weights = update_backpropagation(...
        inputTrain,...
        weights,...
        1,...
        eta,...
        output);    
       
        training_regression_error(epoch_count) = ...
        eval_network(...
            inputTrain,...
            weights,...
            outputTrain);

        validation_regression_error(epoch_count) = ...
        eval_network(...
            inputVal,...
            weights,...
            outputVal);

        test_regression_error(epoch_count) = ...
        eval_network(...
           inputTest,...
            weights,...
            outputTest);
            
        if mod(epoch_count, 10) == 0
            fprintf('\tEpochs: %g', epoch_count);
            fprintf('\tTraining: %g (%g)\n', training_regression_error(epoch_count));
            fprintf('\tValidation: %g (%g)\n', validation_regression_error(epoch_count));
            fprintf('\tTest: %g (%g)\n', test_regression_error(epoch_count));
            fprintf('\n');            
        end
        
    %loop maintenance    
    if (validation_regression_error(epoch_count)) < validation_stop_threshold || (epoch_count >= max_iterations)
        break;
    end
    
    epoch_count = epoch_count + 1;  
end

errors.training.regression = ...
eval_network(...
    inputTrain,...
    weights,...
    outputTrain);

errors.validation.regression= ...
eval_network(...
    inputVal,...
    weights,...
    outputVal);

errors.test.regression = ...
eval_network(...
    inputTest,...
    weights,...
    outputTest);

fprintf('Training: %g (%g)\n', errors.training.regression);
fprintf('Validation: %g (%g)\n',errors.validation.regression);
fprintf('Test: %g (%g)\n', errors.test.regression);

if plot_data
    %% Create figure
    figure1 = figure('PaperPosition',[0.6345 6.345 20.3 15.23],'PaperSize',[20.98 29.68]);

    %% Create axes
    plot1 = plot([...
        training_regression_error; ...
        validation_regression_error;...
        test_regression_error;...    
        training_classification_error; ...
        validation_classification_error;...
        test_classification_error;
        ]');

    title('Error vs. Learning Time');
    xlabel('Epochs');
    ylabel('Average Error');
		
    set(plot1(1),'Color',[1 0 0], 'LineStyle','-');
    set(plot1(2),'Color',[0 .7 .7], 'LineStyle','-'); 
    set(plot1(3),'Color',[.8 .9 0], 'LineStyle','-');

    set(plot1(4),'Color',[1 0 0], 'LineStyle',':');
    set(plot1(5),'Color',[0 .7 .7], 'LineStyle',':');
    set(plot1(6),'Color',[.8 .9 0], 'LineStyle',':');

    legend1 = legend({'Training', 'Training Classification','Validation', 'Validation Classification', 'Test', 'Test Classification'});
end
